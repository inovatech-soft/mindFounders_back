// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChatMode {
  COUNCIL
  DECISION
}

enum MessageRole {
  USER
  CHARACTER
  NARRATOR
  SUMMARY
  SYSTEM
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  avatar        String?
  favorites     String?        // JSON string of favorite character names
  responseStyle String         @default("BREVE") // BREVE, DETALHADA, ESPIRITUAL, PRATICA
  preferences   Json?          // Additional user preferences
  questionnaire Questionnaire?
  userPreferences Preferences? // New preferences relation
  chats         ChatSession[]
  // Spiritual features relations
  oracoes       Oracao[]
  participacoesEstudo ParticipacaoEstudo[]
  diarioFe      DiarioFe[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

model Character {
  id           String            @id @default(uuid())
  key          String            @unique // "moises", "jose-egito", "salomao", "freud"
  name         String
  avatarUrl    String?
  basePrompt   String            // persona + estilo
  styleTags    String[]          @default([]) // "espiritual", "psicanal√≠tico", etc.
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  participants ChatParticipant[]

  @@map("characters")
}

model ChatSession {
  id           String            @id @default(uuid())
  userId       String
  mode         ChatMode
  title        String?
  closed       Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  participants ChatParticipant[]
  messages     Message[]

  @@map("chat_sessions")
  @@index([userId, createdAt])
}

model ChatParticipant {
  id          String      @id @default(uuid())
  sessionId   String
  characterId String
  orderIndex  Int         @default(0)
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  character   Character   @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([sessionId, characterId])
  @@map("chat_participants")
}

model Message {
  id         String      @id @default(uuid())
  sessionId  String
  role       MessageRole // USER, CHARACTER, NARRATOR, SUMMARY, SYSTEM
  authorKey  String?     // ex: "moises" para CHARACTER
  authorName String?
  content    String
  meta       Json?       // Additional metadata (suggested_topics, etc.)
  createdAt  DateTime    @default(now())
  session    ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("messages")
  @@index([sessionId, createdAt])
}

model Questionnaire {
  id                 String   @id @default(uuid())
  userId             String   @unique
  ageRange           String
  currentSituation   String
  anxietyFrequency   String
  sadnessHandling    String[] // Array of strings for multiple options
  socialLife         String
  loveRelationships  String
  workFeeling        String
  motivation         String[] // Array of strings for multiple options
  routine            String
  sleep              String
  selfKnowledgeGoal  String[] // Array of strings for multiple options
  values             String[] // Array of strings for multiple options
  challenge          String
  childhoodInfluence String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("questionnaires")
}

model Preferences {
  id                  String   @id @default(uuid())
  userId              String   @unique
  responseTone        String   @default("detalhada") // "breve", "detalhada", "espiritual", "pratica"
  notificationEnabled Boolean  @default(false)
  notificationType    String?  // "daily", "weekly"
  notificationTime    String?  // Ex: "08:00"
  notificationDays    String[] @default([]) // ["monday", "wednesday"] caso seja semanal
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("preferences")
}

// Spiritual Features Models

model Oracao {
  id          String   @id @default(uuid())
  userId      String
  titulo      String
  categoria   String   // "gratidao", "pedido", "intercession", "contemplation"
  conteudo    String
  emocoes     String[] @default([]) // Emotions associated with the prayer
  tempoGasto  Int?     // Time spent in minutes
  privacidade String   @default("privada") // "privada", "compartilhada"
  isFavorita  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("oracoes")
  @@index([userId, createdAt])
}

model EstudoTematico {
  id               String                 @id @default(uuid())
  titulo           String
  descricao        String
  categoria        String                 // "fe", "sabedoria", "amor", "perda", "proposito"
  tempoEstimado    Int                    // estimated time in minutes
  sessoes          SessionEstudo[]
  participacoes    ParticipacaoEstudo[]
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt

  @@map("estudos_tematicos")
}

model SessionEstudo {
  id         String         @id @default(uuid())
  estudoId   String
  numero     Int            // session number (1, 2, 3...)
  titulo     String
  conteudo   String         // study content/questions
  versiculo  String?        // related bible verse
  reflexao   String         // reflection questions
  estudo     EstudoTematico @relation(fields: [estudoId], references: [id], onDelete: Cascade)

  @@map("sessoes_estudo")
  @@index([estudoId, numero])
}

model ParticipacaoEstudo {
  id               String         @id @default(uuid())
  userId           String
  estudoId         String
  sessaoAtual      Int            @default(1)
  progresso        Float          @default(0.0) // percentage completed
  respostasUsuario Json?          // user answers to study questions
  iniciadoEm       DateTime       @default(now())
  finalizadoEm     DateTime?
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  estudo           EstudoTematico @relation(fields: [estudoId], references: [id], onDelete: Cascade)

  @@unique([userId, estudoId])
  @@map("participacoes_estudo")
}

model DiarioFe {
  id           String   @id @default(uuid())
  userId       String
  titulo       String?  // optional title for the entry
  conteudo     String
  emocoes      String[] @default([]) // emotions felt during writing
  versiculos   String[] @default([]) // bible verses referenced
  gratidao     String[] @default([]) // things the user is grateful for
  oracoes      String[] @default([]) // prayer requests/prayers mentioned
  reflexoes    String?  // personal reflections
  clima        String?  // emotional climate: "paz", "ansiedade", "alegria", etc.
  privacidade  String   @default("privada") // "privada", "compartilhada"
  isFavorito   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("diario_fe")
  @@index([userId, createdAt])
}
